# from ttt import cuda_kernel
import torch 
import math
from functools import lru_cache
import s2cnn.utils.cuda as cuda_utils
from s2cnn.utils.decorator import cached_dirpklgz

# from so3_fft import SO3_fft_real, SO3_ifft_real, so3_fft, so3_rfft, so3_ifft, so3_rifft, _setup_wigner
# from s2_fft import s2_fft, s2_ifft, S2_fft_real
# from s2cnn.s2_mm import s2_mm
# from s2cnn.so3_mm import so3_mm
# from so3_integrate import so3_integrate

from s2_mm import s2_mm
from so3_mm import so3_mm

from s2_ft import s2_rft, _setup_s2_ft
from s2_grid import s2_near_identity_grid

from so3_grid import so3_near_identity_grid
from so3_ft import so3_rft, _setup_so3_ft

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")


# test s2_mm
# '''
# x[4, 1, 2, complex]
# y[4, 2, 2, complex]
# output[10, 1, 2, complex]
# '''
# x = [[[[0.0048023,-0.40458207], [1.79408436,-0.07827689]]], 
#     [[[0.1481331,-0.1488403], [-0.14244263,+1.66082884]]],
#     [[[3.52054643,+2.05366168], [-2.62468797,-0.62151324]]],
#     [[[-0.47777319,-0.34876392], [-0.21101613,1.91229308]]]]
# x = torch.tensor(x, dtype=torch.float32, device=device)
# y = [[[[-1.80279253,+0.73619164], [-1.03064625,-0.56473663]], [[0.04960715,0.], [0.00772077,-0.03679032]]],
#     [[[-0.06273715,-0.00214314], [-0.09198901,+0.04865882]], [[0.03957726,-0.03430344], [0.01923412,+0.]]], 
#     [[[-0.03957726,-0.03430344], [-0.09198901,-0.04865882]], [[0.06273715,-0.00214314], [0.00772077,+0.03679032]]], 
#     [[[-1.80279253,+0.73619164], [-1.03064625,-0.56473663]], [[0.01923412,+0.], [-0.03957726,-0.03430344]]]]
# y = torch.tensor(y, dtype=torch.float32, device=device)
# output = s2_mm(x, y)
# print('This is s2_mm', output)


# test s2_ft
# x = [[0.0048023, -0.40458207, 1.79408436, -0.07827689, 0.1481331,-0.1488403, -0.14244263, 1.66082884,
#     3.52054643, 2.05366168, -2.62468797, -0.62151324, -0.47777319, -0.34876392, -0.21101613, 1.91229308,
#     -0.03957726, -0.03430344, -0.09198901, -0.04865882, 0.06273715, -0.00214314, 0.00772077, 0.03679032]]
# x = torch.tensor(x, dtype=torch.float32, device=device)
# grid_s2 = s2_near_identity_grid()
# output = s2_rft(x, 3, grid_s2)
# print('This is s2_ft', output.size())





# test so3_mm
# '''
# x[10, 1, 2, complex]
# y[10, 2, 2, complex]
# output[10, 1, 2, complex]
# '''
# y = [[[[-1.80279253,+0.73619164], [-1.03064625,-0.56473663]], [[0.04960715,0.], [0.00772077,-0.03679032]]],
#     [[[-0.06273715,-0.00214314], [-0.09198901,+0.04865882]], [[0.03957726,-0.03430344], [0.01923412,+0.]]], 
#     [[[-0.03957726,-0.03430344], [-0.09198901,-0.04865882]], [[0.06273715,-0.00214314], [0.00772077,+0.03679032]]], 
#     [[[-1.80279253,+0.73619164], [-1.03064625,-0.56473663]], [[0.01923412,+0.], [-0.03957726,-0.03430344]]],
#     [[[-1.80279253,+0.73619164], [-1.03064625,-0.56473663]], [[0.04960715,0.], [0.00772077,-0.03679032]]],
#     [[[-0.06273715,-0.00214314], [-0.09198901,+0.04865882]], [[0.03957726,-0.03430344], [0.01923412,+0.]]], 
#     [[[-0.03957726,-0.03430344], [-0.09198901,-0.04865882]], [[0.06273715,-0.00214314], [0.00772077,+0.03679032]]], 
#     [[[-1.80279253,+0.73619164], [-1.03064625,-0.56473663]], [[0.01923412,+0.], [-0.03957726,-0.03430344]]],
#     [[[-1.80279253,+0.73619164], [-1.03064625,-0.56473663]], [[0.04960715,0.], [0.00772077,-0.03679032]]],
#     [[[-0.06273715,-0.00214314], [-0.09198901,+0.04865882]], [[0.03957726,-0.03430344], [0.01923412,+0.]]]]
# y = torch.tensor(y, dtype=torch.float32, device=device)
# x = [[[[0.0048023,-0.40458207], [1.79408436,-0.07827689]]], 
#     [[[0.1481331,-0.1488403], [-0.14244263,+1.66082884]]],
#     [[[3.52054643,+2.05366168], [-2.62468797,-0.62151324]]],
#     [[[-0.47777319,-0.34876392], [-0.21101613,1.91229308]]],
#     [[[0.0048023,-0.40458207], [1.79408436,-0.07827689]]], 
#     [[[0.1481331,-0.1488403], [-0.14244263,+1.66082884]]],
#     [[[3.52054643,+2.05366168], [-2.62468797,-0.62151324]]],
#     [[[-0.47777319,-0.34876392], [-0.21101613,1.91229308]]],
#     [[[0.0048023,-0.40458207], [1.79408436,-0.07827689]]], 
#     [[[0.1481331,-0.1488403], [-0.14244263,+1.66082884]]]]
# x = torch.tensor(x, dtype=torch.float32, device=device)
# output = so3_mm(x, y)
# print('This is so3_mm', output)


# test so3_ft
x = [[0.0048023, -0.40458207, 1.79408436, -0.07827689, 0.1481331,-0.1488403, -0.14244263, 1.66082884,
    3.52054643, 2.05366168, -2.62468797, -0.62151324, -0.47777319, -0.34876392, -0.21101613, 1.91229308,
    -0.03957726, -0.03430344, -0.09198901, -0.04865882, 0.06273715, -0.00214314, 0.00772077, 0.03679032,
    0.0048023, -0.40458207, 1.79408436, -0.07827689, 0.1481331,-0.1488403, -0.14244263, 1.66082884,
    3.52054643, 2.05366168, -2.62468797, -0.62151324, -0.47777319, -0.34876392, -0.21101613, 1.91229308,
    -0.03957726, -0.03430344, -0.09198901, -0.04865882, 0.06273715, -0.00214314, 0.00772077, 0.03679032,
    0.0048023, -0.40458207, 1.79408436, -0.07827689, 0.1481331,-0.1488403, -0.14244263, 1.66082884,
    3.52054643, 2.05366168, -2.62468797, -0.62151324, -0.47777319, -0.34876392, -0.21101613, 1.91229308,
    -0.03957726, -0.03430344, -0.09198901, -0.04865882, 0.06273715, -0.00214314, 0.00772077, 0.03679032]]
x = torch.tensor(x, dtype=torch.float32, device=device)
grid_so3 = so3_near_identity_grid()
output = so3_rft(x, 3, grid_so3)
# F = _setup_so3_ft(2, grid_so3, device_type=x.device.type, device_index=x.device.index) 
print('This is s2_ft', output)



