# from ttt import cuda_kernel
# import torch
from keras import backend as K 
import tensorflow as tf 
import math
# from functools import lru_cache
# import s2cnn.utils.cuda as cuda_utils
# from s2cnn.utils.decorator import cached_dirpklgz

# from so3_fft import so3_fft, so3_rfft, so3_ifft, so3_rifft, so3_rfft_dumbb, so3_rifft_dumbb
# from so3_rotation import so3_rotation
# from s2_fft import s2_fft, s2_ifft, s2_rfft_dumb
from s2_mm import s2_mm 
from so3_mm import so3_mm

# device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")


#kernel = cuda_kernel(16, 16, 10, False)
#x = torch.randn(1, 4, 4, 4, device=device)

'''w = _setup_wigner(3, nl=3, weighted=not False, device_type=x.device.type, device_index=x.device.index)
print(w.dtype)
print(x.size())
print(w.size())'''



# test s2_mm    (checked)
# '''
# x[4, 1, 2]
# y[4, 2, 2]
# output[10, 1, 2]
# '''
# x = [[[0.0048023-0.40458207j, 1.79408436-0.07827689j]], 
#     [[0.1481331-0.1488403j, -0.14244263+1.66082884j]],
#     [[3.52054643+2.05366168j, -2.62468797-0.62151324j]],
#     [[-0.47777319-0.34876392j, -0.21101613+1.91229308j]]]
# x = K.constant(x, dtype='complex64')
# y = [[[-1.80279253+0.73619164j, -1.03064625-0.56473663j], [0.04960715+0.j, 0.00772077-0.03679032j]],
#     [[-0.06273715-0.00214314j, -0.09198901+0.04865882j], [0.03957726-0.03430344j, 0.01923412+0.j]], 
#     [[-0.03957726-0.03430344j, -0.09198901-0.04865882j], [0.06273715-0.00214314j, 0.00772077+0.03679032j]], 
#     [[-1.80279253+0.73619164j, -1.03064625-0.56473663j], [0.01923412+0.j, -0.03957726-0.03430344j]]]
# y = K.constant(y, dtype='complex64')
# output = s2_mm(x, y)
# print(output)
# print('This is s2_mm', K.eval(output))




# test so3_mm   (checked)
'''
x[10, 1, 2]
y[10, 2, 2]
output[10, 1, 2]
'''
# x = [[[0.0048023-0.40458207j, 1.79408436-0.07827689j]], 
#     [[0.1481331-0.1488403j, -0.14244263+1.66082884j]],
#     [[3.52054643+2.05366168j, -2.62468797-0.62151324j]],
#     [[-0.47777319-0.34876392j, -0.21101613+1.91229308j]],
#     [[0.0048023-0.40458207j, 1.79408436-0.07827689j]], 
#     [[0.1481331-0.1488403j, -0.14244263+1.66082884j]],
#     [[3.52054643+2.05366168j, -2.62468797-0.62151324j]],
#     [[-0.47777319-0.34876392j, -0.21101613+1.91229308j]],
#     [[0.0048023-0.40458207j, 1.79408436-0.07827689j]], 
#     [[0.1481331-0.1488403j, -0.14244263+1.66082884j]]]
# x = K.constant(x, dtype='complex64')
# y = [[[-1.80279253+0.73619164j, -1.03064625-0.56473663j], [0.04960715+0.j, 0.00772077-0.03679032j]],
#     [[-0.06273715-0.00214314j, -0.09198901+0.04865882j], [0.03957726-0.03430344j, 0.01923412+0.j]], 
#     [[-0.03957726-0.03430344j, -0.09198901-0.04865882j], [0.06273715-0.00214314j, 0.00772077+0.03679032j]], 
#     [[-1.80279253+0.73619164j, -1.03064625-0.56473663j], [0.01923412+0.j, -0.03957726-0.03430344j]],
#     [[-1.80279253+0.73619164j, -1.03064625-0.56473663j], [0.04960715+0.j, 0.00772077-0.03679032j]],
#     [[-0.06273715-0.00214314j, -0.09198901+0.04865882j], [0.03957726-0.03430344j, 0.01923412+0.j]], 
#     [[-0.03957726-0.03430344j, -0.09198901-0.04865882j], [0.06273715-0.00214314j, 0.00772077+0.03679032j]], 
#     [[-1.80279253+0.73619164j, -1.03064625-0.56473663j], [0.01923412+0.j, -0.03957726-0.03430344j]],
#     [[-1.80279253+0.73619164j, -1.03064625-0.56473663j], [0.04960715+0.j, 0.00772077-0.03679032j]],
#     [[-0.06273715-0.00214314j, -0.09198901+0.04865882j], [0.03957726-0.03430344j, 0.01923412+0.j]]]
# y = K.constant(y, dtype='complex64')
# output = so3_mm(x, y)
# print(output)
# print('This is so3_mm', K.eval(output))





