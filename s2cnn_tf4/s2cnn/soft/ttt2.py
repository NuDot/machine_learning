# from ttt import cuda_kernel
# import torch
from keras import backend as K 
import tensorflow as tf 
import math
# from functools import lru_cache
# import s2cnn.utils.cuda as cuda_utils
# from s2cnn.utils.decorator import cached_dirpklgz

from so3_fft import so3_fft, so3_rfft, so3_ifft, so3_rifft, so3_rfft_dumbb, so3_rifft_dumbb
# from so3_rotation import so3_rotation
from s2_fft import s2_fft, s2_ifft, s2_rfft_dumb
from so3_integrate import so3_integrate

# device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")


#kernel = cuda_kernel(16, 16, 10, False)
#x = torch.randn(1, 4, 4, 4, device=device)

'''w = _setup_wigner(3, nl=3, weighted=not False, device_type=x.device.type, device_index=x.device.index)
print(w.dtype)
print(x.size())
print(w.size())'''






# test s2.fft   (checked)
# z = [[[0.42603686, 0.00646541, 0.17590782, -0.24929921], 
#   [0.36826733, -0.14408416, 0.04443504, 0.3135485],
#   [-0.0150484, -0.04670224, -0.1118164, 0.09415457], 
#   [-0.36826733, 0.14408416, -0.04443504, -0.3135485]]]
# z = K.constant(z, dtype='float32')
# output = s2_rfft_dumb(z)
# print('This is s2_rfft', K.eval(output))





# test so3.fft_rfft   (checked)
# x = [[[[ 0.0048023,  -0.40458207,  1.79408436, -0.07827689],
#    [ 0.1481331,  -0.1488403,  -0.14244263,  1.66082884],
#    [ 3.52054643,  2.05366168, -2.62468797,  -0.62151324],
#    [-0.47777319, -0.34876392, -0.21101613,  1.91229308]],
#   [[-1.80279253,  0.73619164, -1.03064625, -0.56473663],
#    [-1.21986254, -1.52521617, 2.0423388,   1.48565296],
#    [-0.35644175,  1.78471635, -1.38603531,  0.51432837],
#    [-0.98789277,  2.42642777, -0.6465386,  -1.66290551]],
#   [[-0.21395746,  0.50230859, -0.7619481,   1.55777885],
#    [-1.80258717,  1.89827357, -1.34112996,  0.15176737],
#    [ 2.03341876, -1.72222865,  0.53519591,  1.48290159],
#    [-1.82246829, 1.59492484,  0.72235954,  0.30607501]],
#   [[ 0.75419527, -1.01750185, -0.29577965,  1.68591135],
#    [ 0.86544632, -0.36566661, -2.03820207,  0.58283227],
#    [ 0.89429737,  1.22126051, -1.13592228, -2.7906825 ],
#    [ 0.11227912,  0.04372044, -0.7543048,  -0.37328803]]]]
# x = K.constant(x, dtype='float32')
# output = so3_rfft_dumbb(x)
# print('This is so3_rfft', K.eval(output))


# test so3.fft_rifft  (checked)
# y = [[ 0.04960715+0.j        ],
#     [ 0.00772077-0.03679032j],
#     [-0.06273715-0.00214314j],
#     [-0.09198901+0.04865882j],
#     [ 0.03957726-0.03430344j],
#     [ 0.01923412+0.j        ],
#     [-0.03957726-0.03430344j],
#     [-0.09198901-0.04865882j],
#     [ 0.06273715-0.00214314j],
#     [ 0.00772077+0.03679032j]]
# y = K.constant(y, dtype='complex64')
# output = so3_rifft_dumbb(y)
# print('This is so3_rfft', K.eval(output))

# test so3_integrate  (checked)
x = [[[[ 0.0048023,  -0.40458207,  1.79408436, -0.07827689],
   [ 0.1481331,  -0.1488403,  -0.14244263,  1.66082884],
   [ 3.52054643,  2.05366168, -2.62468797,  -0.62151324],
   [-0.47777319, -0.34876392, -0.21101613,  1.91229308]],
  [[-1.80279253,  0.73619164, -1.03064625, -0.56473663],
   [-1.21986254, -1.52521617, 2.0423388,   1.48565296],
   [-0.35644175,  1.78471635, -1.38603531,  0.51432837],
   [-0.98789277,  2.42642777, -0.6465386,  -1.66290551]],
  [[-0.21395746,  0.50230859, -0.7619481,   1.55777885],
   [-1.80258717,  1.89827357, -1.34112996,  0.15176737],
   [ 2.03341876, -1.72222865,  0.53519591,  1.48290159],
   [-1.82246829, 1.59492484,  0.72235954,  0.30607501]],
  [[ 0.75419527, -1.01750185, -0.29577965,  1.68591135],
   [ 0.86544632, -0.36566661, -2.03820207,  0.58283227],
   [ 0.89429737,  1.22126051, -1.13592228, -2.7906825 ],
   [ 0.11227912,  0.04372044, -0.7543048,  -0.37328803]]]]
x = K.constant(x, dtype='float32')
y = so3_integrate(x)
print('This is so3_integrate', K.eval(y))


'''
ar = [[[[ [0.0048023],  [-0.40458207],  [1.79408436], [-0.07827689]],
   [ [0.1481331],  [-0.1488403],  [-0.14244263],  [1.66082884]],
   [ [3.52054643],  [2.05366168], [-2.62468797],  [-0.62151324]],
   [[-0.47777319], [-0.34876392], [-0.21101613],  [1.91229308]]],

  [[[-1.80279253],  [0.73619164], [-1.03064625], [-0.56473663]],
   [[-1.21986254], [-1.52521617], [2.0423388],   [1.48565296]],
   [[-0.35644175],  [1.78471635], [-1.38603531],  [0.51432837]],
   [[-0.98789277],  [2.42642777], [-0.6465386],  [-1.66290551]]],

  [[[-0.21395746],  [0.50230859], [-0.7619481],   [1.55777885]],
   [[-1.80258717],  [1.89827357], [-1.34112996],  [0.15176737]],
   [ [2.03341876], [-1.72222865],  [0.53519591],  [1.48290159]],
   [[-1.82246829], [1.59492484],  [0.72235954],  [0.30607501]]],

  [[ [0.75419527], [-1.01750185], [-0.29577965],  [1.68591135]],
   [ [0.86544632], [-0.36566661], [-2.03820207],  [0.58283227]],
   [ [0.89429737],  [1.22126051], [-1.13592228], [-2.7906825 ]],
   [ [0.11227912],  [0.04372044], [-0.7543048],  [-0.37328803]]]]]

z = [[[[0.42603686, 0], [0.00646541, 0], [0.17590782, 0], [-0.24929921, 0]], 
  [[0.36826733, 0.02886696], [-0.14408416, -0.056376], [0.04443504, -0.08554423], [0.3135485, 0.16360429]],
  [[-0.0150484, 0], [-0.04670224, 0], [-0.1118164, 0], [0.09415457, 0]], 
  [[-0.36826733, 0.02886696], [0.14408416, -0.056376], [-0.04443504, -0.08554423], [-0.3135485, 0.16360429]]]]

zinverse =[[ [0.42603686, 0], [0.00646541, 0]], [[0.17590782, 0], [-0.24929921, 0]], 
  [ [0.36826733, 0.02886696], [-0.14408416, -0.056376]], [[0.04443504,-0.08554423], [0.3135485, 0.16360429]]]


br = [[[[ 0.0048023,  -0.40458207,  1.79408436, -0.07827689],
   [ 0.1481331,  -0.1488403,  -0.14244263,  1.66082884],
   [ 3.52054643,  2.05366168, -2.62468797,  -0.62151324],
   [-0.47777319, -0.34876392, -0.21101613,  1.91229308]],

  [[-1.80279253,  0.73619164, -1.03064625, -0.56473663],
   [-1.21986254, -1.52521617, 2.0423388,   1.48565296],
   [-0.35644175,  1.78471635, -1.38603531,  0.51432837],
   [-0.98789277,  2.42642777, -0.6465386,  -1.66290551]],

  [[-0.21395746,  0.50230859, -0.7619481,   1.55777885],
   [-1.80258717,  1.89827357, -1.34112996,  0.15176737],
   [ 2.03341876, -1.72222865,  0.53519591,  1.48290159],
   [-1.82246829, 1.59492484,  0.72235954,  0.30607501]],

  [[ 0.75419527, -1.01750185, -0.29577965,  1.68591135],
   [ 0.86544632, -0.36566661, -2.03820207,  0.58283227],
   [ 0.89429737,  1.22126051, -1.13592228, -2.7906825 ],
   [ 0.11227912,  0.04372044, -0.7543048,  -0.37328803]]]]   

alpha = 1
beta = 0.3
gamma = 1.5

air =[[ [0.04960715, 0.]        ],
 [ [0.00772077, -0.03679032]],
 [[-0.06273715, -0.00214314]],
 [[-0.09198901, 0.04865882]],
 [ [0.03957726, -0.03430344]],
 [ [0.01923412, 0.        ]],
 [[-0.03957726, -0.03430344]],
 [[-0.09198901, -0.04865882]],
 [ [0.06273715, -0.00214314]],
 [ [0.00772077, 0.03679032]]]

zinverse = torch.tensor(zinverse, dtype=torch.float32, device=device)
#print(z.size())

#imx = torch.zeros_like(x)

#x = torch.cat((x, imx), -1)

y = s2_ifft(zinverse)
print(y)
'''
